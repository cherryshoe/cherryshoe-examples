<?xml version="1.0" encoding="UTF-8"?>


<beans xmlns="http://www.springframework.org/schema/beans"
     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     xmlns:aop="http://www.springframework.org/schema/aop"
     xmlns:tx="http://www.springframework.org/schema/tx"
     xmlns:jdbc="http://www.springframework.org/schema/jdbc"
     xmlns:context="http://www.springframework.org/schema/context"
     xsi:schemaLocation="
     http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
     http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd
     http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
     http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">


	<!-- For unit integration testing, you can switch between the hsqldb and the postgresql, and oracle one. -->
    <!-- 1. in-memory database and a datasource -->
    <jdbc:embedded-database id="defaultDataSource">
        <jdbc:script location="classpath:database/custom-hsqldb-schema.sql"/>
    </jdbc:embedded-database>
    
    <!-- 2. For testing local postgresql instance -->
<!--     <bean id="defaultDataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close"> -->
<!--         <property name="driverClassName"> -->
<!--             <value>org.postgresql.Driver</value> -->
<!--         </property> -->
<!--         <property name="url"> -->
<!--             <value>jdbc:postgresql://localhost:5432/cherryshoe</value> -->
<!--         </property> -->
<!--         <property name="username"> -->
<!--             <value>cherryshoe</value> -->
<!--         </property> -->
<!--         <property name="password"> -->
<!--             <value>cherryshoe</value> -->
<!--         </property> -->
<!--      </bean> -->

    <!-- 3. For testing real DEV oracle instance -->
<!--     <bean id="defaultDataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close"> -->
<!--         <property name="driverClassName"> -->
<!--             <value>oracle.jdbc.OracleDriver</value> -->
<!--         </property> -->
<!--         <property name="url"> -->
<!--             <value>jdbc:oracle:thin:@//localhost:1531/cherryshoeservice</value> -->
<!--         </property> -->
<!--         <property name="username"> -->
<!--             <value>cherryshoe</value> -->
<!--         </property> -->
<!--         <property name="password"> -->
<!--             <value>cherryshoe</value> -->
<!--         </property> -->
<!--      </bean> -->
 
   
    <!-- **********************************************************************************************
    Basically, everything starting below has to go in the real spring-custom-database.xml 
    ********************************************************************************************** -->
    <!-- transaction manager, use JtaTransactionManager for global tx -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="defaultDataSource" />
    </bean>

    <!-- enable component scanning (beware that this does not enable mapper scanning!) -->    
    <context:component-scan base-package="com.cherryshoe.database.dao" />

    <!-- enable autowire -->
    <context:annotation-config />

    <!-- enable transaction demarcation with annotations -->
    <tx:annotation-driven />

    <!-- define the SqlSessionFactory -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="defaultDataSource" />
        <property name="typeAliasesPackage" value="com.cherryshoe.database.domain" />
    </bean>

    <!-- scan for mappers and let them be autowired -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.cherryshoe.database.persistence" />
    </bean>
</beans>
